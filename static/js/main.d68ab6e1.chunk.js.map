{"version":3,"sources":["logo.svg","component/WeatherCard/WeatherCard.jsx","shared/server.js","pages/WeatherPage/WeatherPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","cityName","weatherDegree","weatherState","icon","onRefresh","className","onClick","src","alt","data","a","weatherDomain","apiKey","request","length","axios","response","server","WeatherPage","props","useState","lng","setLng","lat","setLat","status","setStatus","reponse","setResponse","useEffect","then","res","error","alert","Object","keys","name","parseInt","main","temp_min","weather","description","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAAe,I,mDCoBAA,MAdf,YAAkF,IAA3DC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAChE,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKA,UAAU,cAAcC,QAASF,EAAtC,SAAiD,cAAC,IAAD,MACjD,sBAAKC,UAAU,uBAAf,UACI,mBAAGA,UAAU,aAAb,SAA2BL,IAC3B,4BAAIE,IACJ,oBAAGG,UAAU,eAAb,UAA6BJ,EAA7B,QACA,qBAAKM,IAAG,4CAAuCJ,EAAvC,WAAsDK,IAAI,Y,oECZlF,WAAsBC,GAAtB,qBAAAC,EAAA,6DACUC,EAAe,mDACfC,EAAS,mCACXC,EAAW,GAEXA,EADDJ,EAAKK,OAAO,EACH,GAAD,OAAIH,EAAJ,eAAwBF,EAAK,GAA7B,gBAAuCA,EAAK,GAA5C,kBAAwDG,GAEvD,GAAD,OAAID,EAAJ,aAAsBF,EAAK,GAA3B,kBAAuCG,GAPtD,SAS2BG,IAAMF,GATjC,cASUG,EATV,yBAYWA,GAZX,4C,sBAceC,M,kDCqFAC,MAhGf,SAAqBC,GACjB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAsBF,mBAAS,GAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA4BJ,mBAAS,MAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAoFA,OApDAC,qBAAU,WAGNZ,EAFa,CAACI,EAAKE,IAENO,MAAK,SAAAC,GACVA,EAAItB,KAAKuB,MACTC,MAAM,yBAKPL,EAAYG,EAAItB,WAMxB,CAACY,EAAKE,IAqCL,sBAAKlB,UAAU,YAAf,UACKoB,EAAS,4BAAIA,IAAc,KAC3BS,OAAOC,KAAKR,GAASb,OAAO,EAAG,cAAC,EAAD,CAAad,SAAU2B,EAAQS,KAAMnC,cAAeoC,SAASV,EAAQW,KAAKC,SAAS,IAAKrC,aAAcyB,EAAQa,QAAQ,GAAGC,YAAatC,KAAMwB,EAAQa,QAAQ,GAAGrC,KAAMC,UAnB7M,WACSsC,UAAUC,aAGXjB,EAAU,eACVgB,UAAUC,YAAYC,oBAAmB,SAACC,GACtCnB,EAAU,MACVF,EAAOqB,EAASC,OAAOC,UACvBzB,EAAOuB,EAASC,OAAOE,cACxB,WACCtB,EAAU,wCARdA,EAAU,gDAiBqN,SCpF5NuB,MARf,WACE,OACE,qBAAK5C,UAAU,MAAf,SACC,cAAC,EAAD,OCKU6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d68ab6e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './WeatherCard.css';\r\nimport { WiCloudRefresh } from 'react-icons/wi';\r\nimport { FiRefreshCw } from 'react-icons/fi';\r\n\r\n\r\nfunction WeatherCard({ cityName, weatherDegree, weatherState, icon, onRefresh }) {\r\n    return (\r\n        <div className=\"c-weather-card\">\r\n            <div className=\"btn-refresh\" onClick={onRefresh}><FiRefreshCw /></div>\r\n            <div className=\"card-title-container\">\r\n                <p className=\"card-title\">{cityName}</p>\r\n                <p>{weatherState}</p>\r\n                <p className=\"card-degrees\">{weatherDegree} C</p>\r\n                <img src={`https://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherCard;","import axios from \"axios\";\r\n\r\nasync function server(data){\r\n    const weatherDomain ='https://api.openweathermap.org/data/2.5/weather?';\r\n    const apiKey = '20ff1268a191cf3b1891801ac90a5e87';\r\n    let request  = '';\r\n    if(data.length>1){\r\n        request=`${weatherDomain}lat=${data[1]}&lon=${data[0]}&appid=${apiKey}`\r\n    }else{\r\n        request=`${weatherDomain}q=${data[0]}&appid=${apiKey}`\r\n    }\r\n    const response = await axios(request);\r\n    // const response = await axios(\"https://json.extendsclass.com/bin/edf698cbf481\");\r\n\r\n    return response;\r\n}\r\nexport default server;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport WeatherCard from '../../component/WeatherCard/WeatherCard';\r\nimport server from '../../shared/server';\r\nimport './WeatherPage.css'\r\nfunction WeatherPage(props) {\r\n    const [lng, setLng] = useState(0);\r\n    const [lat, setLat] = useState(0);\r\n    const [status, setStatus] = useState(null);\r\n    const [reponse , setResponse] = useState({});\r\n    \r\n    \r\n   \r\n    // async function getTemp() {\r\n    //     try {\r\n    //       const response = await axios.get(`api.openweathermap.org/data/2.5/weather?lat=${32}&lon=${34}&appid=${apiKey}`);\r\n    //       console.log(response);\r\n    //     } catch (error) {\r\n    //       console.error(error);\r\n    //     }\r\n    //   }\r\n\r\n   \r\n    // useEffect(() => {\r\n    //     console.log(\"in the useEffect\");\r\n\r\n    //     //const axios = require('axios');\r\n    //      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${apiKey}`).then(res => {\r\n    //         if (res.data.error) {\r\n    //             alert(\"Something going wrong\")\r\n    //         } else {\r\n\r\n    //            let temp = res.data.main.temp;\r\n    //             setWeather(temp);\r\n\r\n    //         }\r\n    //     })\r\n\r\n    // }, [lng, lat]);\r\n\r\n   /** ======= with useEffect =======*/\r\n    useEffect(() => {\r\n        const data = [lng, lat];\r\n        // const data = [\"tel aviv\"];\r\n        server(data).then(res => {\r\n            if (res.data.error) {\r\n                alert(\"Something going wrong\");\r\n            } else {\r\n                // let temp = res.data.main.pressure;\r\n               // let temp = res.data.main.temp;\r\n               // setWeather(temp);\r\n               setResponse(res.data);\r\n              \r\n            }\r\n        })\r\n       \r\n        \r\n    }, [lng, lat]);\r\n\r\n    // const currentWeather = () => {\r\n    //     const data = [lng, lat];\r\n    //     server(\"lod\").then(res => {\r\n    //         if (res.data.error) {\r\n    //             alert(\"Something going wrong\");\r\n    //         } else {\r\n    //             let temp = res.data.name;\r\n    //             console.log(res.data.name);\r\n    //             setWeather(temp);\r\n    //         }\r\n    //     })\r\n    // }\r\n    // const locationWeather = () => {\r\n    //     getLocation();\r\n    //     currentWeather();\r\n    //     console.log(\"in localWeather\");\r\n    // }\r\n\r\n    function getLocation() {\r\n        if (!navigator.geolocation) {\r\n            setStatus(\"Geolocation is'nt support in your browser\");\r\n        } else {\r\n            setStatus(\"Locating...\");\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                setStatus(null);\r\n                setLat(position.coords.latitude);\r\n                setLng(position.coords.longitude);\r\n            }, () => {\r\n                setStatus(\"Unable to retrieve your location\");\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"p-weather\">\r\n            {status ? <p>{status}</p> : null}\r\n            {Object.keys(reponse).length>0? <WeatherCard cityName={reponse.name} weatherDegree={parseInt(reponse.main.temp_min/10)} weatherState={reponse.weather[0].description} icon={reponse.weather[0].icon} onRefresh={getLocation}/>:null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherPage;","import logo from './logo.svg';\nimport './App.css';\nimport WeatherPage from './pages/WeatherPage/WeatherPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <WeatherPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}